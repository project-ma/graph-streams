version: "3"

networks:
  data-tier:
    driver: bridge

volumes:
  redpanda-0: null
  memgraph-0: null

services:
  
# Redpanda Compose File Doco https://docs.redpanda.com/current/get-started/quick-start/
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.22
    container_name: rp-data
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with eachother internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      # The amount of memory to make available to Redpanda.
      - --memory 1G
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # enable logs for debugging.
      - --default-log-level=debug
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    networks:
      - data-tier
  
  rp-console:
    depends_on:
      - redpanda
    image: docker.redpanda.com/redpandadata/console:v2.3.8
    container_name: rp-console
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - 8070:8080
    networks:
      - data-tier

  memgraph-platform:
    image: memgraph/memgraph-platform
    container_name: mg-platform
    volumes:
      - memgraph-0:/var/lib/memgraph
      - ./memgraph/data-streams/memgraph/import-data:/usr/lib/memgraph/import-data
    ports:
      - '3000:3000'
      - '7687:7687'
      - '7444:7444'
    # environment:
    #   MEMGRAPH: --bolt-server-name-for-init=Neo4j/     
    ### docker run cli: -e MEMGRAPH="--bolt-server-name-for-init=Neo4j/"  
    ### ==> Update: Memgraph v2.11; this Environment variable no longer needs to be set, Bolt Driver for Neo4j support now built in.
    networks:
      - data-tier

  graphlytic:
    image: demtec/graphlytic
    container_name: graphlytic
    volumes:
      - ./graphlytic_vol:/usr/share/graphlytic/volume
    ports:
      - 8090:8080
    networks:
      - data-tier

  